package me.matoosh.undernet.event;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;

import me.matoosh.undernet.UnderNet;

/**
 * Manages the events generated by the application.
 * Created by Mateusz RÄ™bacz on 21.02.2017.
 */

public class EventManager {
    /**
     * List of all the registered event handlers.
     */
    public static HashMap<Class<Event>, ArrayList<Method>> eventHandlers = new HashMap<>();

    /**
     * Registers an event.
     * @param eventType
     */
    public static void registerEvent(Class<Event> eventType) {
        if (!eventHandlers.containsKey(eventType)) {
            UnderNet.logger.info("Registered event type " + eventType.toString());
            eventHandlers.put(eventType, new ArrayList<Method>());
        } else {
            UnderNet.logger.warn("Event type " + eventType.toString() + " already registered!");
        }
    }

    /**
     * Registers an event handler.
     * @param method
     * @param eventType
     */
    public static void registerHandler(Method method, Class<Event> eventType) {
        eventHandlers.get(eventType).add(method);
    }

    /**
     * Calls the specified event.
     * @param event
     */
    public static void callEvent(Event event) {
        for (Method method :
            eventHandlers.get(event.getClass()))
        {
            //TODO: Implement EventHandler type.
            try {
                method.invoke(null, event);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            }
        }
    }
}
